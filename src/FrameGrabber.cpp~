/**
 * This file is part of the LePi Project:
 * https://github.com/cosmac/LePi
 *
 * MIT License
 *
 * Copyright (c) 2017 Andrei Claudiu Cosma
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// LePi
#include <LeptonCommon.h>
#include <LeptonCamera.h>
#include <png.h>

// Third party
//#include <opencv2/core.hpp>
//#include <opencv2/highgui.hpp>

// C/C++
#include <iostream>
#include <unistd.h>
#include <chrono>

/**
 * @brief Sample app for streaming IR videos using LePi parallel interface
 */
int main()
{    
    // Open camera connection
    LeptonCamera cam;
    //        cam.sendCommand(AGC_EN, nullptr);
    //        sleep(1);
	    cam.sendCommand(REBOOT, nullptr);
        sleep(1);
	//	            cam.sendCommand(FFC, nullptr);
        sleep(1);
    cam.start();
    
    // Define frame
    std::vector<uint16_t> frame(cam.width() * cam.height());
    //    std::vector<uint8_t> frameU8(cam.width() * cam.height());
    //    cv::Mat img(cam.height(), cam.width(), CV_16UC1, frame.data());
    // cv::Mat imgU8(cam.height(), cam.width(), CV_8UC1, frameU8.data());
    //cv::Mat imgNorm;
    
    // Stream frames
    int frame_nb{0};
    auto start_time = std::chrono::system_clock::now();


    bool done = false;
    while (!done) {

        // Frame request
        if (cam.hasFrame()) {
            cam.getFrameU16(frame);
            ++frame_nb;
	    //	    done = true;
        }

	//	int i = 0;
	//for(uint16_t d: frame)
	// {
	//frameU8[i++] = d>>6;
	//	std::cout << d << " ";
	//	std::cout << d << " ";
	//}
        
        // Display
//	        cv::imshow("Lepton", img);
//	        cv::imshow("LeptonU8", imgU8);
//		cv::normalize(img, imgNorm, 0, 65535, cv::NORM_MINMAX);
	        cv::imshow("LeptonNorm", imgNorm);
	        int key = cv::waitKey(10);
		std::cout << "key=" << key << std::endl;
	       
	        if (key == 27) { // Press Esc to exit
	            break;
	        }
	        else if (key == 'f') {
		  cam.stop();
		    sleep(1);
	            cam.sendCommand(FFC, nullptr);
		    std::cout << "FFC" << std::endl;
		    sleep(1);
		  cam.start();
	        }
	        else if (key == 'r') {
	            cam.sendCommand(REBOOT, nullptr);
	        }
	        else if (key == 't') {
	            int temperature{0};
            // Received temperature is in Kelvin and scaled by 100
	            cam.sendCommand(SENSOR_TEMP_K, &temperature);
	            std::cout << "Sensor temperature: " 
	                      << temperature/100.0 << " K" << std::endl;
	        }
	        else if (key == 'h') {
	            std::cout << "Help: " << std::endl
	                      << "\t- f: run flat filed correction (FFC)" << std::endl
	                      << "\t- r: run sensor reboot" << std::endl
	                      << "\t- t: show sensor temperature" << std::endl
	                      << "\t- h: show help" << std::endl;
	        }
        
		//        Runtime
	   auto end_time = std::chrono::system_clock::now();
        auto elapsed = std::chrono::duration_cast
            <std::chrono::seconds>(end_time - start_time);
        if (elapsed.count() > 1.0) {
	     double fps = static_cast<double>(frame_nb) / static_cast<double>(elapsed.count());
            std::cout << "FPS: " << fps << std::endl;
            start_time = end_time;
            frame_nb = 0;
        }
    }

    // Release sensor
    cam.stop();

    for(uint16_t d: frame)
      {
	std::cout << d << " ";
      }
    
    
    return EXIT_SUCCESS;
}



int write_png_file(char* file_name)
{
  /* create file */
  FILE *fp = fopen(file_name, "wb");
  if (!fp)
    {
      return -1;
    }


  /* initialize stuff */
  png_structp png_ptr;
  png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);

  if (!png_ptr)
    abort_("[write_png_file] png_create_write_struct failed");

  info_ptr = png_create_info_struct(png_ptr);
  if (!info_ptr)
    abort_("[write_png_file] png_create_info_struct failed");

  if (setjmp(png_jmpbuf(png_ptr)))
    abort_("[write_png_file] Error during init_io");

  png_init_io(png_ptr, fp);


  /* write header */
  if (setjmp(png_jmpbuf(png_ptr)))
    abort_("[write_png_file] Error during writing header");

  png_set_IHDR(png_ptr, info_ptr, width, height,
	       bit_depth, color_type, PNG_INTERLACE_NONE,
	       PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);

  png_write_info(png_ptr, info_ptr);


  /* write bytes */
  if (setjmp(png_jmpbuf(png_ptr)))
    abort_("[write_png_file] Error during writing bytes");

  png_write_image(png_ptr, row_pointers);


  /* end write */
  if (setjmp(png_jmpbuf(png_ptr)))
    abort_("[write_png_file] Error during end of write");

  png_write_end(png_ptr, NULL);

  /* cleanup heap allocation */
  for (y=0; y<height; y++)
    free(row_pointers[y]);
  free(row_pointers);

  fclose(fp);
}
